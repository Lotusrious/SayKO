# Task ID: 2
# Title: 사용자 인증 시스템 구축
# Status: done
# Dependencies: 1
# Priority: high
# Description: Firebase Authentication을 사용하여 이메일/비밀번호 기반의 회원가입, 로그인, 로그아웃 기능을 구현합니다.
# Details:
1. 회원가입, 로그인, 비밀번호 재설정 페이지 UI를 생성합니다.
2. Firebase Auth의 `createUserWithEmailAndPassword`, `signInWithEmailAndPassword`, `signOut`, `sendPasswordResetEmail` 함수를 사용하여 인증 로직을 구현합니다.
3. 사용자의 로그인 상태를 전역적으로 관리하기 위한 Context API 또는 상태 관리 라이브러리(Zustand 등)를 설정합니다.
4. 로그인된 사용자만 접근할 수 있는 보호된 라우트(Protected Route)를 구현합니다.

# Test Strategy:
신규 사용자가 성공적으로 가입하고 Firestore `users` 컬렉션에 문서가 생성되는지 확인합니다. 사용자가 로그인 및 로그아웃 할 수 있는지 테스트합니다. 로그아웃 상태에서 보호된 페이지 접근 시 로그인 페이지로 리디렉션되는지 확인합니다.

# Subtasks:
## 1. Firebase 프로젝트 및 인증 설정 [done]
### Dependencies: None
### Description: Firebase 콘솔에서 프로젝트를 생성하고 이메일/비밀번호 인증 방식을 활성화합니다.
### Details:
Firebase 콘솔에 접속하여 새 프로젝트를 생성한 후, Authentication > Sign-in method에서 Email/Password를 활성화합니다.

## 2. Firebase Authentication SDK 및 초기화 코드 추가 [done]
### Dependencies: 2.1
### Description: 프로젝트에 Firebase Authentication SDK를 설치하고 초기화 코드를 작성합니다.
### Details:
npm 또는 yarn을 통해 firebase 패키지를 설치하고, 프로젝트 내에서 Firebase 및 Authentication을 초기화합니다.

## 3. 회원가입, 로그인, 비밀번호 재설정 UI 및 인증 로직 구현 [done]
### Dependencies: 2.2
### Description: 이메일/비밀번호 기반 회원가입, 로그인, 비밀번호 재설정 UI를 만들고, Firebase Auth 함수로 인증 로직을 구현합니다.
### Details:
createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendPasswordResetEmail 함수를 사용해 각 기능을 구현합니다.

## 4. 로그인 상태 전역 관리 로직 구현 [done]
### Dependencies: 2.3
### Description: Context API 또는 상태 관리 라이브러리를 사용해 로그인 상태를 전역적으로 관리합니다.
### Details:
onAuthStateChanged 등 Firebase Auth의 상태 변화를 감지하여 전역 상태로 관리합니다.

## 5. 보호된 라우트(Protected Route) 구현 [done]
### Dependencies: 2.4
### Description: 로그인된 사용자만 접근 가능한 보호된 라우트를 구현합니다.
### Details:
전역 로그인 상태를 활용해 인증되지 않은 사용자가 보호된 페이지에 접근 시 리다이렉트 처리합니다.

