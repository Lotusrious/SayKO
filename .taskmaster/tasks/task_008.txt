# Task ID: 8
# Title: 학습 언어 쌍 선택
# Status: pending
# Dependencies: 2, 3
# Priority: medium
# Description: 사용자가 학습 언어 쌍(한-영, 영-한, 한-독, 독-한)을 선택하고 전환할 수 있는 기능을 구현합니다.
# Details:
1. 언어 선택 컴포넌트를 생성합니다.
2. 출발 언어와 목표 언어를 선택하기 위한 UI를 구현합니다.
3. 사용자의 언어 설정을 프로필에 저장합니다.
4. 선택된 언어 쌍을 사용하도록 단어 시험을 업데이트합니다.
5. 모든 언어 쌍에 대해 단어 조회가 올바르게 작동하는지 확인합니다.

```tsx
// LanguageSelector.tsx
const LanguageSelector: React.FC = () => {
  const { user } = useAuth();
  const [selectedPair, setSelectedPair] = useState<string>('');
  const [loading, setLoading] = useState(true);
  
  const languagePairs = [
    { value: 'korean-english', label: '한국어 → 영어' },
    { value: 'english-korean', label: '영어 → 한국어' },
    { value: 'korean-german', label: '한국어 → 독일어' },
    { value: 'german-korean', label: '독일어 → 한국어' }
  ];
  
  useEffect(() => {
    const loadUserPreference = async () => {
      if (user) {
        const userDoc = await getDoc(doc(db, 'users', user.uid));
        const userData = userDoc.data() as User;
        setSelectedPair(userData.preferredLanguagePair);
        setLoading(false);
      }
    };
    
    loadUserPreference();
  }, [user]);
  
  const handleLanguageChange = async (value: string) => {
    if (user) {
      setSelectedPair(value);
      await updateDoc(doc(db, 'users', user.uid), {
        preferredLanguagePair: value
      });
    }
  };
  
  if (loading) return <LoadingSpinner />;
  
  return (
    <div className="language-selector">
      <h2>학습 방향 선택</h2>
      <div className="language-options">
        {languagePairs.map(pair => (
          <div 
            key={pair.value} 
            className={`language-option ${selectedPair === pair.value ? 'selected' : ''}`}
            onClick={() => handleLanguageChange(pair.value)}
          >
            {pair.label}
          </div>
        ))}
      </div>
    </div>
  );
};
```

# Test Strategy:
각 언어 쌍의 선택을 테스트합니다. 사용자 설정이 올바르게 저장되는지 확인합니다. 각 언어 쌍으로 단어 시험을 테스트하여 단어가 올바른 언어로 표시되는지 확인합니다. 사이클 중간에 언어 쌍을 전환하는 것을 테스트합니다.
