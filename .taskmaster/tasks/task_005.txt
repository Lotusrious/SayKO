# Task ID: 5
# Title: 학습 사이클 관리
# Status: pending
# Dependencies: 3, 4
# Priority: high
# Description: 각 날짜와 사이클에 맞는 단어 선택 로직을 포함하여 5단계 학습 사이클 시스템을 구현합니다.
# Details:
1. 사용자의 현재 사이클과 날짜를 추적하는 로직을 구현합니다.
2. 각 사이클과 날짜에 적합한 단어를 선택하는 알고리즘을 만듭니다:
   - 사이클 1: 20일 동안 매일 25단어 (순차적)
   - 사이클 2: 10일 동안 50단어 범위에서 25단어 선택
   - 사이클 3: 5일 동안 100단어 범위에서 25단어 선택
   - 사이클 4: 2일 동안 250단어 범위에서 25단어 선택
   - 사이클 5: 1일 동안 500단어 전체에서 25단어 선택
3. 사용자를 다음 날짜/사이클로 진행시키는 로직을 구현합니다.
4. 사용자가 오늘의 시험을 완료했는지 확인하는 서비스를 만듭니다.

```typescript
// cycle.service.ts
export const getWordsForCurrentDay = async (userId: string): Promise<VocabularyWord[]> => {
  // 사용자의 현재 사이클과 날짜 가져오기
  const userDoc = await getDoc(doc(db, 'users', userId));
  const userData = userDoc.data() as User;
  
  const { currentCycle, currentDay, preferredLanguagePair } = userData;
  
  // 사이클과 날짜에 기반해 단어 가져오기
  return getVocabularyForDay(currentCycle, currentDay, preferredLanguagePair);
};

export const advanceToNextDay = async (userId: string): Promise<void> => {
  const userDoc = await getDoc(doc(db, 'users', userId));
  const userData = userDoc.data() as User;
  
  let { currentCycle, currentDay } = userData;
  
  // 다음 날짜/사이클 계산
  const daysInCycle = [20, 10, 5, 2, 1];
  
  if (currentDay < daysInCycle[currentCycle - 1]) {
    currentDay++;
  } else if (currentCycle < 5) {
    currentCycle++;
    currentDay = 1;
  } else {
    // 사용자가 모든 사이클을 완료함, 리셋 또는 유지
    currentCycle = 5;
    currentDay = 1;
  }
  
  // 사용자 문서 업데이트
  await updateDoc(doc(db, 'users', userId), {
    currentCycle,
    currentDay
  });
};
```

# Test Strategy:
모든 사이클과 날짜에 걸친 진행 상황을 테스트합니다. 각 사이클과 날짜에 대한 올바른 단어 선택을 확인합니다. 최종 사이클 완료와 같은 엣지 케이스를 테스트합니다. 사용자 진행 상황이 올바르게 저장되고 검색되는지 확인합니다.
