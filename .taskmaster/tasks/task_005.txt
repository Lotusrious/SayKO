# Task ID: 5
# Title: Google Cloud TTS API 연동 설정
# Status: done
# Dependencies: 1
# Priority: high
# Description: Google Cloud Text-to-Speech API 사용을 위한 초기 설정 및 서비스 계정을 구성합니다.
# Details:
1. Google Cloud Platform에서 새 프로젝트를 생성하거나 기존 프로젝트를 선택합니다.
2. Text-to-Speech API를 활성화합니다.
3. API 요청 인증을 위한 서비스 계정(Service Account)을 생성하고, JSON 형식의 키 파일을 다운로드합니다.
4. **주의:** 보안을 위해 이 JSON 키 파일은 Git 저장소에 포함시키지 않고, Firebase Functions 또는 서버 환경의 환경 변수로 안전하게 관리해야 합니다.
5. 프론트엔드에서 직접 호출하는 대신, TTS 요청을 처리할 Firebase Cloud Function을 준비합니다. 이는 API 키를 안전하게 보호하기 위함입니다.

# Test Strategy:
간단한 Firebase Cloud Function을 작성하여 Google TTS API에 테스트 요청을 보내고, 음성 데이터(예: base64 인코딩된 mp3)를 성공적으로 수신하는지 확인합니다. 함수 로그를 통해 인증이 성공했는지 검증합니다.

# Subtasks:
## 1. Google Cloud 프로젝트 생성 및 TTS API 활성화 [done]
### Dependencies: None
### Description: Google Cloud Platform에서 프로젝트를 생성하고 Text-to-Speech API를 활성화합니다.
### Details:
1. Google Cloud Console(console.cloud.google.com)에 접속합니다.
2. 새 프로젝트를 생성하거나 기존 프로젝트를 선택합니다.
3. API 및 서비스 > 라이브러리로 이동합니다.
4. 'Text-to-Speech API'를 검색하고 선택합니다.
5. '사용 설정' 버튼을 클릭하여 API를 활성화합니다.
6. API가 성공적으로 활성화되었는지 확인합니다.

## 2. 서비스 계정 생성 및 키 파일 다운로드 [done]
### Dependencies: 5.1
### Description: TTS API 호출을 위한 서비스 계정을 생성하고 인증 키 파일을 다운로드합니다.
### Details:
1. Google Cloud Console에서 'IAM 및 관리자' > '서비스 계정'으로 이동합니다.
2. '서비스 계정 만들기'를 클릭합니다.
3. 서비스 계정 이름(예: 'tts-service-account')과 설명을 입력합니다.
4. 역할로 'Cloud Text-to-Speech API 사용자'를 선택합니다.
5. 서비스 계정 생성 후, 해당 계정의 '키' 탭으로 이동합니다.
6. '키 추가' > '새 키 만들기'를 선택하고 JSON 형식으로 키 파일을 다운로드합니다.
7. 다운로드된 키 파일을 안전한 위치에 저장합니다.

## 3. Firebase 프로젝트 설정 및 Cloud Functions 초기화 [done]
### Dependencies: 5.1
### Description: Firebase 프로젝트를 설정하고 Cloud Functions 개발 환경을 초기화합니다.
### Details:
1. Firebase 콘솔(console.firebase.google.com)에서 Google Cloud 프로젝트를 Firebase 프로젝트로 연결합니다.
2. 로컬 개발 환경에 Firebase CLI를 설치합니다: `npm install -g firebase-tools`
3. Firebase에 로그인합니다: `firebase login`
4. 프로젝트 디렉토리를 생성하고 초기화합니다: `firebase init functions`
5. 프로젝트 선택 시 앞서 생성한 Google Cloud 프로젝트를 선택합니다.
6. TypeScript 사용 여부와 필요한 npm 패키지 설치 옵션을 선택합니다.

## 4. 환경 변수 설정 및 서비스 계정 키 보안 관리 [done]
### Dependencies: 5.2, 5.3
### Description: Firebase Functions에서 서비스 계정 키를 환경 변수로 안전하게 관리하도록 설정합니다.
### Details:
1. 다운로드한 서비스 계정 키 파일의 내용을 Base64로 인코딩합니다.
2. Firebase Functions 환경 변수 설정: `firebase functions:config:set google.credentials="BASE64_ENCODED_CREDENTIALS"`
3. 로컬 개발을 위해 `.runtimeconfig.json` 파일을 생성합니다: `firebase functions:config:get > .runtimeconfig.json`
4. `.gitignore` 파일에 `.runtimeconfig.json`과 서비스 계정 키 파일을 추가하여 Git에 포함되지 않도록 합니다.
5. 필요한 경우 CI/CD 파이프라인에도 환경 변수를 안전하게 설정합니다.

## 5. TTS API 호출 Cloud Function 구현 [done]
### Dependencies: 5.4
### Description: 텍스트를 음성으로 변환하는 Firebase Cloud Function을 구현합니다.
### Details:
1. `@google-cloud/text-to-speech` 패키지를 설치합니다: `cd functions && npm install @google-cloud/text-to-speech`
2. Cloud Functions 코드에서 환경 변수에서 서비스 계정 키를 가져와 TTS 클라이언트를 초기화합니다.
3. HTTP 트리거 함수를 생성하여 텍스트 입력을 받고 TTS API를 호출합니다.
4. 변환된 오디오 데이터를 클라이언트에 반환하거나 Firebase Storage에 저장하는 로직을 구현합니다.
5. CORS 설정을 추가하여 웹 클라이언트에서 API를 호출할 수 있도록 합니다.
6. 함수를 배포합니다: `firebase deploy --only functions`

