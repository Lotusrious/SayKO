# Task ID: 7
# Title: 시험 채점 및 결과 표시
# Status: pending
# Dependencies: 6
# Priority: medium
# Description: 단어 시험 채점 시스템을 구현하고, 정답/오답 표시기와 함께 결과를 보여줍니다.
# Details:
1. 사용자 답변과 정답을 비교하는 채점 서비스를 생성합니다.
2. 사소한 오타나 변형을 고려하는 채점 알고리즘을 구현합니다.
3. 다음을 보여주는 결과 페이지를 디자인하고 구현합니다:
   - 총 점수 (X/25)
   - 정답률
   - 정답/오답 표시기가 있는 각 단어
   - 틀린 단어에 대한 정답
4. 시험 결과를 Firestore에 저장합니다.

```typescript
// grading.service.ts
export const gradeTest = async (userId: string, answers: Record<string, string>, words: VocabularyWord[], languagePair: string): Promise<TestResult> => {
  const [sourceLanguage, targetLanguage] = languagePair.split('-');
  
  // 사용자의 현재 사이클과 날짜 가져오기
  const userDoc = await getDoc(doc(db, 'users', userId));
  const { currentCycle, currentDay } = userDoc.data() as User;
  
  let correctCount = 0;
  const gradedWords = words.map(word => {
    const userAnswer = answers[word.id] || '';
    const correctAnswer = word[targetLanguage as keyof VocabularyWord] as string;
    const isCorrect = isAnswerCorrect(userAnswer, correctAnswer);
    
    if (isCorrect) correctCount++;
    
    return {
      wordId: word.id,
      isCorrect,
      userAnswer
    };
  });
  
  // 시험 결과 생성
  const result: TestResult = {
    userId,
    date: Timestamp.now(),
    cycle: currentCycle,
    day: currentDay,
    languagePair,
    correctCount,
    totalCount: words.length,
    words: gradedWords
  };
  
  // Firestore에 저장
  await addDoc(collection(db, 'testResults'), result);
  
  // 시험이 완료되면 다음 날짜로 진행
  await advanceToNextDay(userId);
  
  return result;
};

// 답변이 맞는지 확인하는 헬퍼 함수 (약간의 유연성 포함)
const isAnswerCorrect = (userAnswer: string, correctAnswer: string): boolean => {
  // 기본 비교 (대소문자 무시)
  if (userAnswer.toLowerCase().trim() === correctAnswer.toLowerCase().trim()) {
    return true;
  }
  
  // 여기에 더 정교한 비교 로직을 추가할 수 있습니다.
  // 예: 사소한 오타를 위한 레벤슈타인 거리
  
  return false;
};
```

# Test Strategy:
정답, 오답, 사소한 오타가 있는 답변 등 다양한 입력으로 채점 정확도를 테스트합니다. 결과 표시가 올바른지 확인합니다. Firestore에 결과 저장을 테스트합니다. 시험 완료 후 사용자가 다음 날로 올바르게 진행되는지 확인합니다.
