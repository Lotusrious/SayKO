# Task ID: 10
# Title: 사용자 대시보드
# Status: pending
# Dependencies: 5, 7, 9
# Priority: medium
# Description: 사용자의 학습 통계, 현재 진행 상황, 일일 시험 바로가기를 보여주는 대시보드를 만듭니다.
# Details:
1. 사용자 대시보드 페이지를 디자인하고 구현합니다.
2. 현재 사이클 및 날짜 정보를 표시합니다.
3. 최근 시험 결과 및 통계를 표시합니다.
4. 오늘의 시험을 시작하기 위한 눈에 띄는 버튼을 추가합니다.
5. 최근 활동을 보여주는 미니 달력을 포함합니다.
6. 500개 단어에 대한 전체 진행률(예: 45% 완료)을 표시합니다.

```tsx
// Dashboard.tsx
const Dashboard: React.FC = () => {
  const { user } = useAuth();
  const [userData, setUserData] = useState<User | null>(null);
  const [recentResults, setRecentResults] = useState<TestResult[]>([]);
  const [loading, setLoading] = useState(true);
  const [todayCompleted, setTodayCompleted] = useState(false);
  const navigate = useNavigate();
  
  useEffect(() => {
    const loadDashboardData = async () => {
      if (user) {
        // 사용자 데이터 가져오기
        const userDoc = await getDoc(doc(db, 'users', user.uid));
        const userData = userDoc.data() as User;
        setUserData(userData);
        
        // 최근 시험 결과 가져오기
        const q = query(
          collection(db, 'testResults'),
          where('userId', '==', user.uid),
          orderBy('date', 'desc'),
          limit(5)
        );
        
        const snapshot = await getDocs(q);
        const results = snapshot.docs.map(doc => doc.data() as TestResult);
        setRecentResults(results);
        
        // 오늘 시험 완료 여부 확인
        const today = new Date().toISOString().split('T')[0];
        const todayResult = results.find(r => {
          const resultDate = r.date.toDate().toISOString().split('T')[0];
          return resultDate === today;
        });
        
        setTodayCompleted(!!todayResult);
        setLoading(false);
      }
    };
    
    loadDashboardData();
  }, [user]);
  
  const calculateOverallProgress = () => {
    if (!userData) return 0;
    
    const { currentCycle, currentDay } = userData;
    const daysInCycle = [20, 10, 5, 2, 1];
    
    let completedDays = 0;
    for (let i = 0; i < currentCycle - 1; i++) {
      completedDays += daysInCycle[i];
    }
    
    completedDays += currentDay - 1;
    const totalDays = daysInCycle.reduce((sum, days) => sum + days, 0);
    
    return Math.round((completedDays / totalDays) * 100);
  };
  
  const startTodayTest = () => {
    navigate('/test');
  };
  
  if (loading) return <LoadingSpinner />;
  
  return (
    <div className="dashboard">
      <h1>돌아오신 것을 환영합니다, {user?.displayName || '학습자'}님!</h1>
      
      <div className="progress-summary">
        <div className="current-progress">
          <h2>현재 진행 상황</h2>
          <p>사이클 {userData?.currentCycle}, {userData?.currentDay}일차</p>
          <div className="progress-bar">
            <div 
              className="progress-fill" 
              style={{ width: `${calculateOverallProgress()}%` }}
            ></div>
          </div>
          <p>{calculateOverallProgress()}% 완료</p>
        </div>
        
        <div className="today-test">
          <h2>오늘의 단어 시험</h2>
          {todayCompleted ? (
            <p>오늘의 시험을 완료했습니다. 잘 하셨어요!</p>
          ) : (
            <button onClick={startTodayTest} className="start-test-btn">
              오늘의 시험 시작
            </button>
          )}
        </div>
      </div>
      
      <div className="recent-activity">
        <h2>최근 활동</h2>
        {recentResults.length > 0 ? (
          <div className="results-list">
            {recentResults.map((result, index) => (
              <div key={index} className="result-item">
                <div className="result-date">
                  {result.date.toDate().toLocaleDateString()}
                </div>
                <div className="result-cycle">
                  사이클 {result.cycle}, {result.day}일차
                </div>
                <div className="result-score">
                  {result.correctCount}/{result.totalCount} 
                  ({Math.round((result.correctCount / result.totalCount) * 100)}%)
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p>아직 완료한 시험이 없습니다. 오늘 학습 여정을 시작하세요!</p>
        )}
      </div>
      
      <div className="mini-calendar">
        <h2>활동 달력</h2>
        {/* 미니 달력 컴포넌트 */}
      </div>
    </div>
  );
};
```

# Test Strategy:
다양한 사용자 진행 상태에서 대시보드 로딩을 테스트합니다. 전체 진행률의 정확한 계산을 확인합니다. '오늘의 시험 시작' 버튼 기능성을 테스트합니다. 최근 활동이 올바르게 표시되는지 확인합니다. 일일 시험을 완료한 경우와 보류 중인 경우 모두 테스트합니다.
