# Task ID: 3
# Title: Firestore 데이터베이스 스키마 설계
# Status: done
# Dependencies: 1
# Priority: high
# Description: 단어, 예문, 사용자 학습 데이터를 저장하기 위한 Firestore 컬렉션 구조를 설계합니다.
# Details:
1. **`vocabularies` 컬렉션:**
   - 문서 ID: 자동 생성 ID
   - 필드: `kor` (한국어 단어), `eng` (영어 번역), `ger` (독일어 번역), `category` (카테고리), `examples` (예문 배열)
2. **`examples` 필드 구조 (배열 내 객체):**
   - `{ sentence_ko: '...', sentence_en: '...', sentence_de: '...' }`
3. **`users` 컬렉션:**
   - 문서 ID: Firebase Auth UID
   - 필드: `email`, `displayName`, `currentCycle`, `currentDay`, `languageSettings`, `testHistory` (시험 결과 참조 배열)
4. **`testResults` 컬렉션:**
   - 문서 ID: 자동 생성 ID
   - 필드: `userId`, `date`, `score`, `correctWords`, `incorrectWords`

# Test Strategy:
설계된 스키마가 PRD의 모든 요구사항(단어, 예문, 사용자 진행상황, 시험결과)을 충족하는지 검토합니다. Firestore 보안 규칙을 설정하여 각 사용자가 자신의 데이터에만 접근할 수 있도록 기본 규칙을 작성합니다.

# Subtasks:
## 1. 핵심 컬렉션 및 문서 구조 정의 [done]
### Dependencies: None
### Description: Establish the main Firestore collections (`vocabularies`, `users`, `testResults`) and specify the required fields and data types for each document.
### Details:
List all collections and their fields, including field types and required/optional status. Ensure document IDs follow Firestore best practices to avoid hotspots and maintain scalability.

## 2. 내장 및 중첩 데이터 구조 설계 [done]
### Dependencies: 3.1
### Description: Detail the structure for embedded fields, such as the `examples` array within `vocabularies`, ensuring efficient storage and retrieval.
### Details:
Define the object structure for each example in the `examples` array, specifying keys for each language sentence. Ensure the design keeps documents lightweight and manageable.

## 3. 컬렉션 간의 관계 및 참조 설정 [done]
### Dependencies: 3.1
### Description: Determine how documents in different collections reference each other, such as linking `testResults` to `users` via `userId`.
### Details:
Specify reference fields and their types. Decide between embedding data or using references based on query and scalability needs.

## 4. 인덱싱 및 쿼리 패턴 계획 [done]
### Dependencies: 3.1, 3.2, 3.3
### Description: Identify expected query patterns and design necessary indexes to optimize read and write performance.
### Details:
List common queries (e.g., fetch user progress, search vocabulary by category) and define composite or single-field indexes as needed.

## 5. 보안 규칙 및 데이터 유효성 검사 정의 [done]
### Dependencies: 3.1, 3.2, 3.3
### Description: Draft Firestore security rules to control access and validate data integrity for each collection and field.
### Details:
Write rules to restrict read/write access based on authentication and user roles. Include validation for required fields and data types.

