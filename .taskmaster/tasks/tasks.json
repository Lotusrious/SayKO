{
  "tasks": [
    {
      "id": 1,
      "title": "프로젝트 설정 및 Firebase 초기화",
      "description": "Vite를 사용하여 React + TypeScript 프로젝트를 생성하고 Firebase를 연동합니다.",
      "status": "done",
      "priority": "high",
      "dependencies": [],
      "details": "1. Vite를 사용하여 React와 TypeScript 기반의 신규 프로젝트를 생성합니다.\n2. Firebase 콘솔에서 새 프로젝트를 설정합니다 (Authentication, Firestore, Hosting 활성화).\n3. 프로젝트에 Firebase SDK를 설치하고, `firebaseConfig.js` 또는 환경 변수를 통해 초기화 설정을 완료합니다.\n4. 기본 폴더 구조(components, pages, services, types, hooks)를 설정합니다.",
      "testStrategy": "애플리케이션이 `npm run dev`로 에러 없이 실행되는지 확인합니다. Firebase 서비스(예: Firestore 데이터 읽기)가 프론트엔드와 성공적으로 연결되는지 간단한 테스트 코드로 검증합니다."
    },
    {
      "id": 2,
      "title": "사용자 인증 시스템 구축",
      "description": "Firebase Authentication을 사용하여 이메일/비밀번호 기반의 회원가입, 로그인, 로그아웃 기능을 구현합니다.",
      "status": "done",
      "priority": "high",
      "dependencies": [
        1
      ],
      "details": "1. 회원가입, 로그인, 비밀번호 재설정 페이지 UI를 생성합니다.\n2. Firebase Auth의 `createUserWithEmailAndPassword`, `signInWithEmailAndPassword`, `signOut`, `sendPasswordResetEmail` 함수를 사용하여 인증 로직을 구현합니다.\n3. 사용자의 로그인 상태를 전역적으로 관리하기 위한 Context API 또는 상태 관리 라이브러리(Zustand 등)를 설정합니다.\n4. 로그인된 사용자만 접근할 수 있는 보호된 라우트(Protected Route)를 구현합니다.",
      "testStrategy": "신규 사용자가 성공적으로 가입하고 Firestore `users` 컬렉션에 문서가 생성되는지 확인합니다. 사용자가 로그인 및 로그아웃 할 수 있는지 테스트합니다. 로그아웃 상태에서 보호된 페이지 접근 시 로그인 페이지로 리디렉션되는지 확인합니다.",
      "subtasks": [
        {
          "id": 1,
          "title": "Firebase 프로젝트 및 인증 설정",
          "description": "Firebase 콘솔에서 프로젝트를 생성하고 이메일/비밀번호 인증 방식을 활성화합니다.",
          "dependencies": [],
          "details": "Firebase 콘솔에 접속하여 새 프로젝트를 생성한 후, Authentication > Sign-in method에서 Email/Password를 활성화합니다.",
          "status": "done",
          "testStrategy": "Firebase 콘솔에서 인증 방식이 정상적으로 활성화되었는지 확인합니다."
        },
        {
          "id": 2,
          "title": "Firebase Authentication SDK 및 초기화 코드 추가",
          "description": "프로젝트에 Firebase Authentication SDK를 설치하고 초기화 코드를 작성합니다.",
          "dependencies": [
            1
          ],
          "details": "npm 또는 yarn을 통해 firebase 패키지를 설치하고, 프로젝트 내에서 Firebase 및 Authentication을 초기화합니다.",
          "status": "done",
          "testStrategy": "Firebase 초기화 및 인증 객체가 정상적으로 생성되는지 콘솔 로그 등으로 확인합니다."
        },
        {
          "id": 3,
          "title": "회원가입, 로그인, 비밀번호 재설정 UI 및 인증 로직 구현",
          "description": "이메일/비밀번호 기반 회원가입, 로그인, 비밀번호 재설정 UI를 만들고, Firebase Auth 함수로 인증 로직을 구현합니다.",
          "dependencies": [
            2
          ],
          "details": "createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendPasswordResetEmail 함수를 사용해 각 기능을 구현합니다.",
          "status": "done",
          "testStrategy": "각 UI에서 정상적으로 회원가입, 로그인, 로그아웃, 비밀번호 재설정이 동작하는지 테스트합니다."
        },
        {
          "id": 4,
          "title": "로그인 상태 전역 관리 로직 구현",
          "description": "Context API 또는 상태 관리 라이브러리를 사용해 로그인 상태를 전역적으로 관리합니다.",
          "dependencies": [
            3
          ],
          "details": "onAuthStateChanged 등 Firebase Auth의 상태 변화를 감지하여 전역 상태로 관리합니다.",
          "status": "done",
          "testStrategy": "로그인/로그아웃 시 전역 상태가 올바르게 변경되는지, UI가 이에 맞게 반응하는지 확인합니다."
        },
        {
          "id": 5,
          "title": "보호된 라우트(Protected Route) 구현",
          "description": "로그인된 사용자만 접근 가능한 보호된 라우트를 구현합니다.",
          "dependencies": [
            4
          ],
          "details": "전역 로그인 상태를 활용해 인증되지 않은 사용자가 보호된 페이지에 접근 시 리다이렉트 처리합니다.",
          "status": "done",
          "testStrategy": "로그인 여부에 따라 보호된 라우트 접근이 제한되는지, 비로그인 시 로그인 페이지로 이동하는지 테스트합니다."
        }
      ]
    },
    {
      "id": 3,
      "title": "Firestore 데이터베이스 스키마 설계",
      "description": "단어, 예문, 사용자 학습 데이터를 저장하기 위한 Firestore 컬렉션 구조를 설계합니다.",
      "status": "done",
      "priority": "high",
      "dependencies": [
        1
      ],
      "details": "1. **`vocabularies` 컬렉션:**\n   - 문서 ID: 자동 생성 ID\n   - 필드: `kor` (한국어 단어), `eng` (영어 번역), `ger` (독일어 번역), `category` (카테고리), `examples` (예문 배열)\n2. **`examples` 필드 구조 (배열 내 객체):**\n   - `{ sentence_ko: '...', sentence_en: '...', sentence_de: '...' }`\n3. **`users` 컬렉션:**\n   - 문서 ID: Firebase Auth UID\n   - 필드: `email`, `displayName`, `currentCycle`, `currentDay`, `languageSettings`, `testHistory` (시험 결과 참조 배열)\n4. **`testResults` 컬렉션:**\n   - 문서 ID: 자동 생성 ID\n   - 필드: `userId`, `date`, `score`, `correctWords`, `incorrectWords`",
      "testStrategy": "설계된 스키마가 PRD의 모든 요구사항(단어, 예문, 사용자 진행상황, 시험결과)을 충족하는지 검토합니다. Firestore 보안 규칙을 설정하여 각 사용자가 자신의 데이터에만 접근할 수 있도록 기본 규칙을 작성합니다.",
      "subtasks": [
        {
          "id": 1,
          "title": "핵심 컬렉션 및 문서 구조 정의",
          "description": "Establish the main Firestore collections (`vocabularies`, `users`, `testResults`) and specify the required fields and data types for each document.",
          "dependencies": [],
          "details": "List all collections and their fields, including field types and required/optional status. Ensure document IDs follow Firestore best practices to avoid hotspots and maintain scalability.",
          "status": "done",
          "testStrategy": "Review the schema definition for completeness and adherence to Firestore best practices. Validate with sample documents."
        },
        {
          "id": 2,
          "title": "내장 및 중첩 데이터 구조 설계",
          "description": "Detail the structure for embedded fields, such as the `examples` array within `vocabularies`, ensuring efficient storage and retrieval.",
          "dependencies": [
            1
          ],
          "details": "Define the object structure for each example in the `examples` array, specifying keys for each language sentence. Ensure the design keeps documents lightweight and manageable.",
          "status": "done",
          "testStrategy": "Insert and retrieve sample documents with nested arrays to verify correct structure and performance."
        },
        {
          "id": 3,
          "title": "컬렉션 간의 관계 및 참조 설정",
          "description": "Determine how documents in different collections reference each other, such as linking `testResults` to `users` via `userId`.",
          "dependencies": [
            1
          ],
          "details": "Specify reference fields and their types. Decide between embedding data or using references based on query and scalability needs.",
          "status": "done",
          "testStrategy": "Test queries that join or filter across collections using references to ensure data integrity and performance."
        },
        {
          "id": 4,
          "title": "인덱싱 및 쿼리 패턴 계획",
          "description": "Identify expected query patterns and design necessary indexes to optimize read and write performance.",
          "dependencies": [
            1,
            2,
            3
          ],
          "details": "List common queries (e.g., fetch user progress, search vocabulary by category) and define composite or single-field indexes as needed.",
          "status": "done",
          "testStrategy": "Simulate queries and monitor performance. Adjust indexes based on query explain plans and Firestore recommendations."
        },
        {
          "id": 5,
          "title": "보안 규칙 및 데이터 유효성 검사 정의",
          "description": "Draft Firestore security rules to control access and validate data integrity for each collection and field.",
          "dependencies": [
            1,
            2,
            3
          ],
          "details": "Write rules to restrict read/write access based on authentication and user roles. Include validation for required fields and data types.",
          "status": "done",
          "testStrategy": "Test security rules using the Firestore emulator and attempt various read/write operations as different user roles to ensure correct enforcement."
        }
      ]
    },
    {
      "id": 4,
      "title": "단어 및 예문 데이터 구축 및 Firestore에 저장",
      "description": "초기 500개 단어와 단어별 3개 이상의 예문 데이터를 생성하고, 이를 Firestore에 업로드하는 스크립트를 작성합니다.",
      "status": "done",
      "priority": "high",
      "dependencies": [
        3
      ],
      "details": "1. 500개의 핵심 한국어 단어를 선정합니다.\n2. 각 단어에 대해 시제, 능/수동태를 포함한 다양한 문법적 상황의 예문 3개 이상을 한국어, 영어, 독일어로 작성합니다.\n3. 이 데이터를 `[ { kor: '...', eng: '...', ger: '...', examples: [ ... ] }, ... ]` 형식의 JSON 파일로 구조화합니다.\n4. Node.js 환경에서 실행할 수 있는 일회성 스크립트(`scripts/uploadWords.js`)를 작성하여 JSON 데이터를 읽고 Firestore `vocabularies` 컬렉션에 일괄적으로 업로드합니다.",
      "testStrategy": "업로드 스크립트 실행 후 Firestore 콘솔에서 500개의 단어 문서가 `vocabularies` 컬렉션에 올바르게 생성되었는지 확인합니다. 각 문서에 `examples` 필드가 3개 이상의 예문 객체 배열로 채워져 있는지 샘플링하여 검증합니다.",
      "subtasks": [
        {
          "id": 1,
          "title": "핵심 한국어 단어 500개 선정",
          "description": "초기 데이터 구축을 위해 학습 및 활용도가 높은 500개의 핵심 한국어 단어를 선정합니다.",
          "dependencies": [],
          "details": "한국어 학습용 어휘 목록, 교육 필수 어휘, 빈도 기반 어휘집 등 신뢰할 수 있는 자료를 참고하여 500개의 단어를 선정합니다. 선정 기준은 난이도, 활용도, 품사 다양성 등을 고려합니다.",
          "status": "done",
          "testStrategy": "선정된 단어 리스트가 500개이며, 중복 없이 다양한 품사와 난이도가 포함되어 있는지 검토합니다."
        },
        {
          "id": 2,
          "title": "각 단어별 예문 3개 이상 작성 (한국어/영어/독일어)",
          "description": "선정된 각 단어에 대해 시제, 능/수동태 등 다양한 문법 상황을 반영한 예문을 3개 이상씩 작성하고, 이를 한국어, 영어, 독일어로 번역합니다.",
          "dependencies": [
            1
          ],
          "details": "각 단어별로 실제 사용 맥락을 반영한 예문을 3개 이상 작성합니다. 예문은 시제, 능동/수동, 긍정/부정 등 다양한 문법적 상황을 포함해야 하며, 각 예문은 한국어, 영어, 독일어로 모두 제공되어야 합니다.",
          "status": "done",
          "testStrategy": "각 단어에 대해 예문이 3개 이상 존재하며, 세 언어 모두 누락 없이 번역되어 있는지 확인합니다."
        },
        {
          "id": 3,
          "title": "데이터 JSON 파일 구조화",
          "description": "작성된 단어 및 예문 데이터를 지정된 JSON 포맷으로 구조화합니다.",
          "dependencies": [
            2
          ],
          "details": "데이터를 `[ { kor: '...', eng: '...', ger: '...', examples: [ ... ] }, ... ]` 형식의 JSON 파일로 변환합니다. 각 예문은 예문별로 세 언어가 모두 포함된 구조로 정리합니다.",
          "status": "done",
          "testStrategy": "JSON 파일이 지정된 구조를 정확히 따르고, 모든 단어와 예문이 올바르게 매핑되어 있는지 검증합니다."
        },
        {
          "id": 4,
          "title": "Firestore 업로드 스크립트 작성 (Node.js)",
          "description": "Node.js 환경에서 JSON 데이터를 Firestore의 'vocabularies' 컬렉션에 일괄 업로드하는 스크립트를 작성합니다.",
          "dependencies": [
            3
          ],
          "details": "`scripts/uploadWords.js` 파일을 생성하여, JSON 파일을 읽고 Firestore에 각 단어 데이터를 일괄 업로드하는 로직을 구현합니다. Firestore 인증 및 예외 처리도 포함합니다.",
          "status": "done",
          "testStrategy": "테스트 환경에서 스크립트를 실행하여, Firestore에 데이터가 정상적으로 업로드되는지, 오류 발생 시 적절히 처리되는지 확인합니다."
        },
        {
          "id": 5,
          "title": "최종 데이터 검증 및 업로드 결과 확인",
          "description": "Firestore에 업로드된 데이터의 정확성과 완전성을 검증합니다.",
          "dependencies": [
            4
          ],
          "details": "Firestore 콘솔 또는 쿼리를 통해 업로드된 데이터가 누락 없이 저장되었는지, 각 필드가 올바르게 입력되었는지 확인합니다. 필요시 샘플 데이터를 조회하여 예문, 번역, 구조 등이 정확한지 검토합니다.",
          "status": "done",
          "testStrategy": "업로드된 데이터 일부를 직접 조회하여 원본 JSON과 일치하는지 비교하고, 전체 데이터 건수 및 필드 누락 여부를 점검합니다."
        }
      ]
    },
    {
      "id": 5,
      "title": "Google Cloud TTS API 연동 설정",
      "description": "Google Cloud Text-to-Speech API 사용을 위한 초기 설정 및 서비스 계정을 구성합니다.",
      "status": "done",
      "priority": "high",
      "dependencies": [
        1
      ],
      "details": "1. Google Cloud Platform에서 새 프로젝트를 생성하거나 기존 프로젝트를 선택합니다.\n2. Text-to-Speech API를 활성화합니다.\n3. API 요청 인증을 위한 서비스 계정(Service Account)을 생성하고, JSON 형식의 키 파일을 다운로드합니다.\n4. **주의:** 보안을 위해 이 JSON 키 파일은 Git 저장소에 포함시키지 않고, Firebase Functions 또는 서버 환경의 환경 변수로 안전하게 관리해야 합니다.\n5. 프론트엔드에서 직접 호출하는 대신, TTS 요청을 처리할 Firebase Cloud Function을 준비합니다. 이는 API 키를 안전하게 보호하기 위함입니다.",
      "testStrategy": "간단한 Firebase Cloud Function을 작성하여 Google TTS API에 테스트 요청을 보내고, 음성 데이터(예: base64 인코딩된 mp3)를 성공적으로 수신하는지 확인합니다. 함수 로그를 통해 인증이 성공했는지 검증합니다.",
      "subtasks": [
        {
          "id": 1,
          "title": "Google Cloud 프로젝트 생성 및 TTS API 활성화",
          "description": "Google Cloud Platform에서 프로젝트를 생성하고 Text-to-Speech API를 활성화합니다.",
          "dependencies": [],
          "details": "1. Google Cloud Console(console.cloud.google.com)에 접속합니다.\n2. 새 프로젝트를 생성하거나 기존 프로젝트를 선택합니다.\n3. API 및 서비스 > 라이브러리로 이동합니다.\n4. 'Text-to-Speech API'를 검색하고 선택합니다.\n5. '사용 설정' 버튼을 클릭하여 API를 활성화합니다.\n6. API가 성공적으로 활성화되었는지 확인합니다.",
          "status": "done",
          "testStrategy": "API 활성화 상태를 Google Cloud Console에서 확인합니다."
        },
        {
          "id": 2,
          "title": "서비스 계정 생성 및 키 파일 다운로드",
          "description": "TTS API 호출을 위한 서비스 계정을 생성하고 인증 키 파일을 다운로드합니다.",
          "dependencies": [
            1
          ],
          "details": "1. Google Cloud Console에서 'IAM 및 관리자' > '서비스 계정'으로 이동합니다.\n2. '서비스 계정 만들기'를 클릭합니다.\n3. 서비스 계정 이름(예: 'tts-service-account')과 설명을 입력합니다.\n4. 역할로 'Cloud Text-to-Speech API 사용자'를 선택합니다.\n5. 서비스 계정 생성 후, 해당 계정의 '키' 탭으로 이동합니다.\n6. '키 추가' > '새 키 만들기'를 선택하고 JSON 형식으로 키 파일을 다운로드합니다.\n7. 다운로드된 키 파일을 안전한 위치에 저장합니다.",
          "status": "done",
          "testStrategy": "서비스 계정이 올바른 권한으로 생성되었는지 확인하고, 키 파일이 유효한 JSON 형식인지 확인합니다."
        },
        {
          "id": 3,
          "title": "Firebase 프로젝트 설정 및 Cloud Functions 초기화",
          "description": "Firebase 프로젝트를 설정하고 Cloud Functions 개발 환경을 초기화합니다.",
          "dependencies": [
            1
          ],
          "details": "1. Firebase 콘솔(console.firebase.google.com)에서 Google Cloud 프로젝트를 Firebase 프로젝트로 연결합니다.\n2. 로컬 개발 환경에 Firebase CLI를 설치합니다: `npm install -g firebase-tools`\n3. Firebase에 로그인합니다: `firebase login`\n4. 프로젝트 디렉토리를 생성하고 초기화합니다: `firebase init functions`\n5. 프로젝트 선택 시 앞서 생성한 Google Cloud 프로젝트를 선택합니다.\n6. TypeScript 사용 여부와 필요한 npm 패키지 설치 옵션을 선택합니다.",
          "status": "done",
          "testStrategy": "Firebase CLI가 프로젝트에 성공적으로 연결되었는지 확인하고, functions 디렉토리가 올바르게 생성되었는지 확인합니다."
        },
        {
          "id": 4,
          "title": "환경 변수 설정 및 서비스 계정 키 보안 관리",
          "description": "Firebase Functions에서 서비스 계정 키를 환경 변수로 안전하게 관리하도록 설정합니다.",
          "dependencies": [
            2,
            3
          ],
          "details": "1. 다운로드한 서비스 계정 키 파일의 내용을 Base64로 인코딩합니다.\n2. Firebase Functions 환경 변수 설정: `firebase functions:config:set google.credentials=\"BASE64_ENCODED_CREDENTIALS\"`\n3. 로컬 개발을 위해 `.runtimeconfig.json` 파일을 생성합니다: `firebase functions:config:get > .runtimeconfig.json`\n4. `.gitignore` 파일에 `.runtimeconfig.json`과 서비스 계정 키 파일을 추가하여 Git에 포함되지 않도록 합니다.\n5. 필요한 경우 CI/CD 파이프라인에도 환경 변수를 안전하게 설정합니다.",
          "status": "done",
          "testStrategy": "환경 변수가 올바르게 설정되었는지 확인하고, 로컬에서 `firebase functions:config:get`으로 값을 확인합니다."
        },
        {
          "id": 5,
          "title": "TTS API 호출 Cloud Function 구현",
          "description": "텍스트를 음성으로 변환하는 Firebase Cloud Function을 구현합니다.",
          "dependencies": [
            4
          ],
          "details": "1. `@google-cloud/text-to-speech` 패키지를 설치합니다: `cd functions && npm install @google-cloud/text-to-speech`\n2. Cloud Functions 코드에서 환경 변수에서 서비스 계정 키를 가져와 TTS 클라이언트를 초기화합니다.\n3. HTTP 트리거 함수를 생성하여 텍스트 입력을 받고 TTS API를 호출합니다.\n4. 변환된 오디오 데이터를 클라이언트에 반환하거나 Firebase Storage에 저장하는 로직을 구현합니다.\n5. CORS 설정을 추가하여 웹 클라이언트에서 API를 호출할 수 있도록 합니다.\n6. 함수를 배포합니다: `firebase deploy --only functions`",
          "status": "done",
          "testStrategy": "1. 로컬에서 함수를 테스트합니다: `firebase emulators:start`\n2. 다양한 텍스트 입력과 음성 설정으로 API 호출을 테스트합니다.\n3. 오류 처리가 올바르게 작동하는지 확인합니다."
        }
      ]
    },
    {
      "id": 6,
      "title": "TTS 음성 재생 기능 구현",
      "description": "단어나 예문 옆의 스피커 아이콘을 클릭했을 때, Firebase Cloud Function을 통해 TTS API를 호출하고 반환된 음성 데이터를 재생하는 기능을 구현합니다.",
      "status": "pending",
      "priority": "medium",
      "dependencies": [
        5,
        7
      ],
      "details": "1. 단어와 예문 옆에 스피커 아이콘 UI를 추가합니다.\n2. 아이콘 클릭 시, 해당 텍스트와 언어 코드를 인자로 받아 Firebase Cloud Function(HTTPS Callable)을 호출하는 로직을 작성합니다.\n3. Cloud Function은 Google TTS API를 호출하여 음성 데이터를 생성하고, 이를 base64 문자열 형태로 클라이언트에 반환합니다.\n4. 클라이언트는 수신한 base64 데이터를 오디오 소스로 변환하고, HTML `<audio>` 엘리먼트를 동적으로 생성하거나 Web Audio API를 사용하여 재생합니다.",
      "testStrategy": "UI의 스피커 아이콘을 클릭하여 한국어, 영어, 독일어 텍스트가 올바른 발음으로 재생되는지 테스트합니다. 네트워크 탭에서 Cloud Function이 성공적으로 호출되고 오디오 데이터를 반환하는지 확인합니다. 여러 번 클릭해도 안정적으로 동작하는지 확인합니다."
    },
    {
      "id": 7,
      "title": "단어 및 예문 표시 UI 구현",
      "description": "학습 페이지에 단어와 그에 따른 예문 목록을 표시하는 UI 컴포넌트를 개발합니다.",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        4
      ],
      "details": "1. 현재 학습할 단어를 표시하는 `WordCard` 컴포넌트를 생성합니다.\n2. `WordCard` 내에 해당 단어의 예문 목록을 표시하는 `ExampleList` 컴포넌트를 포함시킵니다.\n3. 각 예문에서 학습 중인 핵심 단어에 밑줄 또는 다른 배경색 스타일을 적용하여 시각적으로 강조합니다.\n4. 부모 컴포넌트로부터 단어 객체를 props로 받아 UI를 렌더링하도록 구현합니다.",
      "testStrategy": "단어와 3개 이상의 예문이 정상적으로 표시되는지 확인합니다. 예문 내 핵심 단어가 올바르게 하이라이트 처리되는지 확인합니다. 다양한 길이의 단어와 예문이 주어져도 UI가 깨지지 않는지 테스트합니다."
    },
    {
      "id": 8,
      "title": "단어 클릭 시 상세 정보 모달 구현",
      "description": "하이라이트된 예문 속 단어를 클릭하면, 해당 단어의 상세 정보(정의, 품사 등)를 보여주는 모달 창을 구현합니다.",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        7
      ],
      "details": "1. 재사용 가능한 `Modal` 컴포넌트를 생성합니다.\n2. 예문 속 하이라이트된 단어에 `onClick` 이벤트를 추가합니다.\n3. 클릭 시, 해당 단어 정보를 API(향후 확장) 또는 미리 정의된 데이터에서 조회하여 모달을 엽니다.\n4. 초기 버전에서는 간단히 단어의 다른 언어 번역을 보여주는 것으로 구현할 수 있습니다.\n5. 모달 외부를 클릭하거나 닫기 버튼을 누르면 모달이 닫히도록 구현합니다.",
      "testStrategy": "하이라이트된 단어를 클릭했을 때 모달 창이 정상적으로 뜨는지 확인합니다. 모달 내용에 올바른 단어 정보가 표시되는지 확인합니다. 모달을 정상적으로 닫을 수 있는지 테스트합니다."
    },
    {
      "id": 9,
      "title": "학습 사이클 로직 구현",
      "description": "사용자의 진행 상황(현재 사이클, 날짜)에 따라 학습할 단어 목록을 결정하는 로직을 구현합니다.",
      "status": "done",
      "priority": "high",
      "dependencies": [
        4,
        "21"
      ],
      "details": "1. 사용자의 `currentCycle`과 `currentDay`를 기반으로 Firestore에서 해당 범위의 단어를 가져오는 `getWordsForToday` 함수를 `services/wordService.js`에 구현합니다.\n2. 5단계 학습 사이클 규칙에 따라 각기 다른 범위의 단어를 선택하는 알고리즘을 구현합니다.\n3. 학습 완료 시, 사용자의 `currentDay` 또는 `currentCycle`을 업데이트하는 로직을 구현합니다.",
      "testStrategy": "각 사이클/날짜 조합에 대해 올바른 단어 목록을 가져오는지 단위 테스트 또는 통합 테스트로 검증합니다. 한 사이클이 끝났을 때 다음 사이클로 정상적으로 넘어가는지 확인합니다."
    },
    {
      "id": 10,
      "title": "기본 단어 시험 UI 구현",
      "description": "매일 25개의 단어에 대해 사용자가 답을 입력할 수 있는 시험 인터페이스를 구현합니다.",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        9
      ],
      "details": "1. `/test` 경로에 시험 페이지 컴포넌트를 생성합니다.\n2. 당일 학습할 25개 단어를 문제로 표시하고, 각 문제마다 입력 필드를 제공합니다.\n3. '채점하기' 버튼을 포함한 폼(form)을 구성합니다.\n4. 진행 상황(예: 5/25)을 표시하는 UI 요소를 추가합니다.",
      "testStrategy": "25개의 문제가 모두 올바르게 표시되는지 확인합니다. 모든 입력 필드에 타이핑이 가능한지 테스트합니다. '채점하기' 버튼 클릭 시 폼 제출 로직이 정상적으로 호출되는지 확인합니다."
    },
    {
      "id": 11,
      "title": "시험 채점 및 결과 저장 로직 구현",
      "description": "사용자가 제출한 답안을 채점하고, 결과를 계산하여 Firestore `testResults` 컬렉션에 저장합니다.",
      "status": "done",
      "priority": "medium",
      "dependencies": [
        10
      ],
      "details": "1. '채점하기' 버튼 클릭 시, 사용자의 답안과 정답을 비교하는 채점 함수를 구현합니다.\n2. 정답/오답 단어 목록, 총점, 정답률을 계산합니다.\n3. 채점 결과를 Firestore의 `testResults` 컬렉션에 새 문서로 저장합니다.\n4. 결과 저장 후, 사용자의 학습 진행도(`currentDay` 등)를 다음 단계로 업데이트합니다.",
      "testStrategy": "정답과 오답이 섞인 시나리오에서 채점이 정확하게 이루어지는지 테스트합니다. Firestore에 시험 결과가 설계된 스키마대로 올바르게 저장되는지 확인합니다."
    },
    {
      "id": 12,
      "title": "시험 결과 피드백 UI 구현",
      "description": "채점 후, 각 문제의 정답/오답 여부와 정답, 총점을 보여주는 결과 페이지를 구현합니다.",
      "status": "in-progress",
      "priority": "medium",
      "dependencies": [
        11
      ],
      "details": "1. 채점 후 `/results/:resultId` 경로로 이동하여 결과 페이지를 표시합니다.\n2. 총점(X/25)과 정답률(%)을 명확하게 보여줍니다.\n3. 각 문제 목록을 표시하며, 맞았는지 틀렸는지 시각적 아이콘(O/X)으로 표시합니다.\n4. 틀린 문제의 경우, 정답을 함께 보여줍니다.",
      "testStrategy": "결과 페이지에 표시되는 총점과 정답/오답 정보가 실제 채점 결과와 일치하는지 확인합니다. Firestore에서 특정 `resultId`의 데이터를 가져와 올바르게 렌더링하는지 테스트합니다."
    },
    {
      "id": 13,
      "title": "'학습 성취도 확인 모드' 구현",
      "description": "사용자가 원할 때 자신의 암기 수준을 점검할 수 있는 예비 시험 모드를 구현합니다.",
      "status": "pending",
      "priority": "medium",
      "dependencies": [
        10
      ],
      "details": "1. 대시보드 또는 학습 페이지에 '시험 모드 시작' 버튼을 추가합니다.\n2. 이 모드는 정규 시험과 동일한 UI와 로직을 사용하지만, 학습 사이클 진행도에는 영향을 주지 않습니다.\n3. 시험 범위는 현재 학습 사이클의 단어들을 대상으로 할 수 있습니다.\n4. 채점 결과는 별도로 기록하거나, '오답 노트' 기능을 위해 임시로 상태에 저장합니다.",
      "testStrategy": "'시험 모드'를 완료해도 사용자의 정규 학습 `currentDay`가 변경되지 않는지 확인합니다. 이 모드에서 발생한 오답이 '오답 노트' 기능으로 올바르게 전달되는지 테스트합니다."
    },
    {
      "id": 14,
      "title": "'오답 노트' 기능 구현",
      "description": "'시험 모드'에서 틀린 단어들만 모아서 다시 풀어볼 수 있는 기능을 구현합니다.",
      "status": "pending",
      "priority": "medium",
      "dependencies": [
        13
      ],
      "details": "1. '시험 모드' 결과 페이지에 '틀린 문제 다시 풀기' 버튼을 추가합니다.\n2. 이 버튼을 클릭하면, 틀렸던 단어들만으로 구성된 새로운 시험 세션을 시작합니다.\n3. 오답 목록이 없을 경우, 버튼은 비활성화되거나 '모두 맞혔어요!' 같은 메시지를 표시합니다.\n4. 모든 오답을 맞힐 때까지 반복해서 도전할 수 있도록 구현합니다.",
      "testStrategy": "시험 모드에서 일부러 몇 문제를 틀린 후, '틀린 문제 다시 풀기'를 눌렀을 때 해당 문제들만 정확히 나타나는지 확인합니다. 오답 노트 시험에서 모든 문제를 맞혔을 때, 적절한 완료 메시지가 표시되는지 테스트합니다."
    },
    {
      "id": 15,
      "title": "언어 쌍 선택 기능 구현",
      "description": "사용자가 학습 방향(예: 한->영, 영->한)을 선택하고 변경할 수 있는 UI를 구현합니다.",
      "status": "pending",
      "priority": "medium",
      "dependencies": [
        2,
        10
      ],
      "details": "1. 설정 페이지 또는 네비게이션 바에 언어 쌍을 선택할 수 있는 드롭다운 메뉴나 라디오 버튼 그룹을 추가합니다.\n2. 사용자의 선택을 Firestore `users` 문서의 `languageSettings` 필드에 저장합니다.\n3. 시험 페이지와 단어 표시 UI가 저장된 언어 설정에 따라 출발/목표 언어를 동적으로 변경하여 표시하도록 구현합니다.",
      "testStrategy": "언어 설정을 변경하고 시험 페이지로 이동했을 때 문제와 답의 언어가 올바르게 바뀌는지 확인합니다. 설정이 Firestore에 저장되고, 재로그인 시에도 유지되는지 테스트합니다."
    },
    {
      "id": 16,
      "title": "학습 진도 시각화 달력 구현",
      "description": "사용자가 언제 어떤 학습을 완료했는지 보여주는 달력 UI를 구현합니다.",
      "status": "pending",
      "priority": "low",
      "dependencies": [
        11
      ],
      "details": "1. `react-calendar`와 같은 라이브러리를 설치하고 커스터마이징합니다.\n2. Firestore `testResults` 컬렉션에서 해당 사용자의 모든 시험 기록을 날짜별로 조회합니다.\n3. 시험을 치른 날짜에 달력 상에 시각적 표시(예: 점 색상)를 합니다.\n4. 날짜를 클릭하면 해당 날짜의 시험 요약(점수 등)을 보여줄 수 있습니다.",
      "testStrategy": "여러 날짜에 걸쳐 시험을 본 테스트 유저의 데이터가 달력에 정확하게 표시되는지 확인합니다. 시험 기록이 없는 달과 있는 달 사이를 이동할 때 UI가 올바르게 업데이트되는지 테스트합니다."
    },
    {
      "id": 17,
      "title": "사용자 대시보드 구현",
      "description": "로그인 후 사용자가 보게 될 메인 페이지로, 학습 현황과 주요 기능 바로가기를 제공합니다.",
      "status": "pending",
      "priority": "medium",
      "dependencies": [
        9,
        16
      ],
      "details": "1. 대시보드 페이지(/dashboard)를 구현합니다.\n2. '오늘의 학습 시작하기' 또는 '이어서 학습하기' 버튼을 가장 눈에 띄게 배치합니다.\n3. 현재 학습 진행 상황(사이클, Day)을 간략히 표시합니다.\n4. 전체 단어 대비 학습 완료율(%)을 보여주는 프로그레스 바를 추가합니다.\n5. 최근 학습 활동이나 미니 달력을 보여주는 섹션을 추가합니다.",
      "testStrategy": "새 사용자와 학습 기록이 있는 사용자 각각에 대해 대시보드가 올바른 정보를 표시하는지 확인합니다. '학습 시작' 버튼이 올바른 오늘의 학습 세션으로 연결되는지 테스트합니다."
    },
    {
      "id": 18,
      "title": "전체 라우팅 및 네비게이션 설정",
      "description": "React Router DOM을 사용하여 앱의 모든 페이지 간의 흐름을 정의하고 네비게이션 UI를 구현합니다.",
      "status": "pending",
      "priority": "medium",
      "dependencies": [
        2,
        10,
        17
      ],
      "details": "1. `App.js` 또는 `main.jsx`에서 모든 페이지 경로(로그인, 회원가입, 대시보드, 시험, 결과, 설정 등)를 설정합니다.\n2. 로그인 상태에 따라 동적으로 표시되는 상단 네비게이션 바 컴포넌트를 생성합니다.\n3. 인증이 필요한 페이지는 이전에 구현한 `ProtectedRoute`로 감싸서 보호합니다.",
      "testStrategy": "네비게이션 바의 링크를 클릭하여 모든 페이지로 정상적으로 이동하는지 확인합니다. 브라우저 주소창에 직접 URL을 입력했을 때도 올바른 페이지가 로드되는지 확인합니다."
    },
    {
      "id": 19,
      "title": "전역 스타일링 및 반응형 디자인 적용",
      "description": "애플리케이션 전체에 일관된 디자인 시스템을 적용하고, 모바일/태블릿/데스크탑 환경을 모두 지원하는 반응형 UI를 구현합니다.",
      "status": "pending",
      "priority": "medium",
      "dependencies": [
        18
      ],
      "details": "1. CSS 프레임워크(Tailwind CSS) 또는 CSS-in-JS 라이브러리(Styled-components)를 사용하여 전역 스타일(색상, 폰트, 간격)을 정의합니다.\n2. 모든 페이지와 컴포넌트가 다양한 화면 크기에서 자연스럽게 보이도록 미디어 쿼리를 적용합니다.\n3. 특히 시험 페이지와 같이 상호작용이 많은 페이지의 모바일 사용성을 중점적으로 테스트하고 개선합니다.",
      "testStrategy": "브라우저 개발자 도구의 기기 토글 기능을 사용하여 다양한 해상도(iPhone, iPad, Desktop)에서 레이아웃이 깨지지 않는지 확인합니다. 모바일에서 버튼 클릭이나 텍스트 입력이 불편하지 않은지 테스트합니다."
    },
    {
      "id": 20,
      "title": "배포 및 최종 테스트",
      "description": "Firebase Hosting을 통해 웹 애플리케이션을 배포하고, 최종 E2E(End-to-End) 테스트를 수행합니다.",
      "status": "pending",
      "priority": "high",
      "dependencies": [
        19
      ],
      "details": "1. `npm run build`를 통해 프로덕션 빌드를 생성합니다.\n2. Firebase CLI를 사용하여 빌드된 파일을 Firebase Hosting에 배포합니다.\n3. 배포된 라이브 URL을 통해 회원가입부터 시험 응시, 결과 확인까지의 전체 사용자 시나리오를 처음부터 끝까지 테스트합니다.\n4. CI/CD 파이프라인(예: GitHub Actions)을 설정하여 `main` 브랜치에 푸시될 때마다 자동으로 배포되도록 구성합니다.",
      "testStrategy": "배포된 URL에서 모든 기능이 로컬 개발 환경과 동일하게 작동하는지 확인합니다. 특히 API 호출(Cloud Functions)이 정상적으로 이루어지는지 네트워크 탭을 통해 검증합니다. 실제 모바일 기기에서 접속하여 최종 사용성을 점검합니다."
    },
    {
      "id": 21,
      "title": "기초 단어 및 조사 데이터 추가 및 학습 순서 조정",
      "description": "500단어 학습 전에 학습해야 할 기초 단어와 조사를 데이터에 추가하고, 이 단어들이 먼저 학습되도록 시스템을 준비합니다.",
      "details": "1. 기초 단어 및 조사 목록 작성:\n   - 기초 단어 (예: 나, 너, 우리, 저, 당신, 그, 그녀, 그들 등)\n   - 기본 조사 (은/는, 이/가, 을/를, 에, 에서, 로/으로 등)\n   - 각 단어와 조사에 대한 영어, 독일어 번역 준비\n\n2. Firestore 데이터 구조 수정:\n   - `vocabularies` 컬렉션에 `priority` 필드 추가 (숫자 타입)\n   - 기초 단어와 조사에는 낮은 priority 값 (예: 1) 할당\n   - 기존 500단어에는 더 높은 priority 값 (예: 2) 할당\n\n3. 데이터 추가 스크립트 작성:\n   - `scripts/addBasicWords.js` 스크립트 생성\n   - 기초 단어 및 조사 데이터를 JSON 형식으로 구조화\n   - Firestore `vocabularies` 컬렉션에 새 데이터 추가\n   - 기존 데이터의 priority 필드 업데이트\n\n4. 학습 순서 조정 로직 구현:\n   - `src/services/vocabularyService.ts` 파일에 단어 불러오기 함수 수정\n   - priority 필드를 기준으로 오름차순 정렬하여 단어 불러오기\n\n5. 사용자 인터페이스 업데이트:\n   - 학습 화면에서 기초 단어와 조사가 먼저 표시되도록 수정\n   - 진행 상황 표시 시 기초 단어/조사와 일반 단어를 구분하여 표시\n\n6. 테스트 데이터 생성:\n   - 기초 단어/조사와 일반 단어가 섞인 테스트 데이터셋 준비",
      "testStrategy": "1. 데이터 추가 확인:\n   - `scripts/addBasicWords.js` 실행 후 Firestore 콘솔에서 기초 단어와 조사가 정확히 추가되었는지 확인\n   - 기존 단어들의 priority 필드가 올바르게 업데이트되었는지 검증\n\n2. 단어 불러오기 기능 테스트:\n   - `vocabularyService.ts`의 단어 불러오기 함수를 단위 테스트로 검증\n   - priority 순으로 정렬된 결과가 반환되는지 확인\n\n3. 사용자 인터페이스 테스트:\n   - 학습 화면에서 기초 단어와 조사가 먼저 표시되는지 확인\n   - 일반 단어로 넘어가기 전에 모든 기초 단어/조사가 표시되는지 검증\n\n4. 진행 상황 표시 테스트:\n   - 학습 진행 상황에서 기초 단어/조사와 일반 단어가 구분되어 표시되는지 확인\n\n5. 종합 기능 테스트:\n   - 실제 학습 과정을 시뮬레이션하여 기초 단어부터 일반 단어까지 순서대로 학습되는지 확인\n   - 여러 학습 세션에 걸쳐 일관된 순서로 단어가 제시되는지 검증\n\n6. 성능 테스트:\n   - 대량의 단어 데이터(예: 1000개 이상)로 로딩 시간 및 정렬 성능 측정",
      "status": "done",
      "dependencies": [
        4
      ],
      "priority": "high",
      "subtasks": [
        {
          "id": 1,
          "title": "한국어 기초 단어 및 조사 목록 수집 및 구조화",
          "description": "국립국어연구원의 한국어 학습용 어휘 목록과 기본 조사를 수집하고 분석하여 우선 학습해야 할 기초 단어와 조사 목록을 작성합니다.",
          "dependencies": [],
          "details": "국립국어연구원의 한국어 학습용 어휘 목록 중 1단계 982개 단어에서 최우선 기초 단어를 선별하고, 기본 조사(은/는, 이/가, 을/를, 에, 에서, 로/으로 등)를 포함한 목록을 작성합니다. 각 단어와 조사에 대한 영어, 독일어 번역을 준비하고 JSON 형식으로 구조화합니다. 특히 인칭대명사(나, 너, 우리 등), 기본 동사(가다, 오다, 먹다, 자다 등), 기본 형용사와 함께 자주 사용되는 조사를 우선적으로 포함시킵니다.",
          "status": "done",
          "testStrategy": "선별된 단어 목록이 초급 한국어 학습에 필수적인 어휘와 조사를 포함하는지 검증하고, 번역의 정확성을 원어민 검토를 통해 확인합니다."
        },
        {
          "id": 2,
          "title": "Firestore 데이터 구조 수정 및 우선순위 체계 설계",
          "description": "기존 Firestore 데이터베이스 구조를 수정하여 단어 우선순위 체계를 구현하고, 기초 단어와 일반 단어를 구분할 수 있는 필드를 추가합니다.",
          "dependencies": [
            1
          ],
          "details": "`vocabularies` 컬렉션에 `priority` 필드(숫자 타입)를 추가하고, 기초 단어와 조사에는 낮은 priority 값(1), 기존 500단어에는 더 높은 priority 값(2)을 할당합니다. 또한 단어 유형을 구분할 수 있는 `type` 필드를 추가하여 '기초단어', '조사', '일반단어' 등으로 분류합니다. 데이터베이스 스키마 변경 계획을 문서화하고, 기존 데이터 마이그레이션 전략을 수립합니다.",
          "status": "done",
          "testStrategy": "테스트 환경에서 스키마 변경을 적용하고, 샘플 데이터로 쿼리 성능과 정확성을 검증합니다."
        },
        {
          "id": 3,
          "title": "기초 단어 및 조사 데이터 추가 스크립트 개발",
          "description": "기초 단어와 조사를 Firestore에 추가하고 기존 데이터의 우선순위를 업데이트하는 스크립트를 개발합니다.",
          "dependencies": [
            1,
            2
          ],
          "details": "`scripts/addBasicWords.js` 스크립트를 생성하여 1단계에서 준비한 기초 단어 및 조사 데이터를 Firestore의 `vocabularies` 컬렉션에 추가합니다. 스크립트는 새 데이터 추가와 함께 기존 500단어의 priority 필드도 업데이트해야 합니다. 데이터 중복 방지 로직과 오류 처리 메커니즘을 구현하고, 실행 로그를 생성하여 데이터 추가 과정을 추적할 수 있도록 합니다. 또한 필요시 데이터 롤백 기능도 포함시킵니다.",
          "status": "done",
          "testStrategy": "테스트 환경에서 스크립트를 실행하여 데이터 추가 및 업데이트가 정확히 이루어지는지 확인하고, 오류 상황에서의 롤백 기능을 테스트합니다."
        },
        {
          "id": 4,
          "title": "학습 순서 조정 및 사용자 인터페이스 업데이트",
          "description": "단어 우선순위에 따라 학습 순서를 조정하고, 사용자 인터페이스를 업데이트하여 기초 단어와 조사가 먼저 학습되도록 구현합니다.",
          "dependencies": [
            2,
            3
          ],
          "details": "`src/services/vocabularyService.ts` 파일의 단어 불러오기 함수를 수정하여 priority 필드를 기준으로 오름차순 정렬하도록 합니다. 학습 화면에서 기초 단어와 조사가 먼저 표시되도록 UI를 수정하고, 진행 상황 표시 시 기초 단어/조사와 일반 단어를 구분하여 표시합니다. 또한 사용자가 학습 진행 상황을 더 명확히 파악할 수 있도록 카테고리별 진행률 표시 기능을 추가합니다. 기초 단어와 조사에 대한 특별한 학습 피드백이나 힌트 시스템도 고려합니다.",
          "status": "done",
          "testStrategy": "다양한 학습 시나리오에서 단어 제시 순서가 우선순위에 따라 정확히 이루어지는지 테스트하고, UI 변경사항이 모든 디바이스와 화면 크기에서 적절히 표시되는지 확인합니다."
        }
      ]
    },
    {
      "id": 22,
      "title": "5단계 복습 사이클 로직 구현",
      "description": "단어 수에 기반한 5단계 복습 사이클 로직을 구현하여 사용자가 효과적으로 단어를 학습할 수 있도록 합니다.",
      "status": "done",
      "dependencies": [
        9
      ],
      "priority": "high",
      "details": "1. 5단계 복습 사이클의 구조를 정의합니다:\n   - 사이클 1: 하루 25단어씩 20일 (총 500단어)\n   - 사이클 2: 하루 50단어씩 10일 (총 500단어)\n   - 사이클 3: 하루 100단어씩 5일 (총 500단어)\n   - 사이클 4: 하루 250단어씩 2일 (총 500단어)\n   - 사이클 5: 하루 500단어씩 1일 (총 500단어)\n   - 사이클 5 이후에는 다시 사이클 1로 돌아가 반복\n\n2. `services/reviewService.ts` 파일을 생성하여 복습 사이클 관련 기능을 구현합니다:\n   - `getCurrentCycleInfo(userId: string): Promise<CycleInfo>` - 현재 사용자의 사이클 정보 조회\n   - `getWordsForToday(userId: string): Promise<Word[]>` - 오늘 학습해야 할 단어 목록 조회\n   - `getTestWords(userId: string): Promise<Word[]>` - 오늘 테스트할 랜덤 25개 단어 선택\n   - `updateCycleProgress(userId: string): Promise<void>` - 학습 완료 후 사이클 진행 상태 업데이트\n\n3. Firestore의 `users/{userId}/cycleProgress` 문서에 사용자의 사이클 진행 상태를 저장합니다:\n   ```typescript\n   interface CycleProgress {\n     currentCycle: number; // 1-5 사이클\n     currentDay: number; // 각 사이클 내 현재 일차\n     completedWords: string[]; // 완료한 단어 ID 목록\n     lastStudyDate: Timestamp; // 마지막 학습 날짜\n     testResults: {\n       date: Timestamp;\n       wordId: string;\n       isCorrect: boolean;\n     }[];\n   }\n   ```\n\n4. 각 사이클별 일일 학습량에 따라 단어를 분배하는 알고리즘을 구현합니다:\n   - 전체 단어 풀에서 아직 학습하지 않은 단어를 우선 선택\n   - 사이클과 일차에 따라 적절한 수의 단어를 선택하는 로직 구현\n   - 사이클 5 완료 후 다시 사이클 1로 돌아가는 순환 구조 구현\n\n5. 학습 사이클 로직(Task 9)과 통합하여 사용자의 일일 학습 단어를 제공하는 기능을 구현합니다.\n\n6. 테스트 기능 구현:\n   - 그날 학습한 단어 중에서 랜덤으로 25개를 선택하는 알고리즘\n   - 테스트 결과를 저장하고 통계를 제공하는 기능\n   - 테스트 결과에 따른 학습 진행 상황 시각화",
      "testStrategy": "1. 단위 테스트:\n   - `getCurrentCycleInfo` 함수가 사용자의 현재 사이클 정보를 정확히 반환하는지 테스트\n   - `getWordsForToday` 함수가 사이클과 일차에 맞는 적절한 수의 단어를 반환하는지 테스트\n   - `getTestWords` 함수가 학습한 단어 중 랜덤하게 25개를 선택하는지 테스트\n   - `updateCycleProgress` 함수가 학습 진행 상태를 올바르게 업데이트하는지 테스트\n\n2. 통합 테스트:\n   - 모의 사용자 데이터로 전체 5단계 사이클을 시뮬레이션하여 각 단계가 올바르게 진행되는지 확인\n   - 사이클 5 완료 후 사이클 1로 돌아가는 순환 구조가 정상 작동하는지 확인\n   - 여러 날짜에 걸친 학습 진행이 정확히 추적되는지 확인\n\n3. 사용자 시나리오 테스트:\n   - 사용자가 매일 적절한 수의 단어를 학습하고 테스트받을 수 있는지 확인\n   - 학습 중단 후 재개했을 때 이전 진행 상태가 올바르게 복원되는지 확인\n   - 여러 사이클에 걸쳐 모든 단어(500개)가 학습되는지 확인\n\n4. 성능 테스트:\n   - 대량의 단어(500개 이상)가 있을 때 일일 학습 단어 조회 성능 측정\n   - 사이클 진행 상태 업데이트 작업의 지연 시간 측정\n   - 테스트용 랜덤 단어 선택 알고리즘의 성능 측정",
      "subtasks": []
    }
  ]
}